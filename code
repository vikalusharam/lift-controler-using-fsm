module lift_fsm (
    input clk,
    input rst,
    input req0, req1, req2,
    output reg [1:0] current_floor,
    output reg moving,
    output reg door_open
);

    // FSM States
    typedef enum logic [1:0] {
        IDLE        = 2'b00,
        MOVING_UP   = 2'b01,
        MOVING_DOWN = 2'b10,
        DOOR_OPEN   = 2'b11
    } state_t;

    state_t state, next_state;

    // Latch requests
    reg [2:0] requests;

    // Target floor
    reg [1:0] target_floor;

    // Latch requests on button press
    always @(posedge clk or posedge rst) begin
        if (rst)
            requests <= 3'b000;
        else begin
            if (req0) requests[0] <= 1;
            if (req1) requests[1] <= 1;
            if (req2) requests[2] <= 1;

            // Clear request when door opens at that floor
            if (state == DOOR_OPEN)
                requests[current_floor] <= 0;
        end
    end

    // State transition
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            current_floor <= 2'd0;
        end else
            state <= next_state;
    end

    // Next state logic
    always @(*) begin
        next_state = state;
        moving = 0;
        door_open = 0;

        case (state)
            IDLE: begin
                if (requests[current_floor]) begin
                    next_state = DOOR_OPEN;
                end else if (|requests) begin
                    if (current_floor < 2 && (requests[2] || requests[1]))
                        next_state = MOVING_UP;
                    else if (current_floor > 0 && (requests[0] || requests[1]))
                        next_state = MOVING_DOWN;
                end
            end

            MOVING_UP: begin
                moving = 1;
                if (requests[current_floor + 1])
                    next_state = DOOR_OPEN;
            end

            MOVING_DOWN: begin
                moving = 1;
                if (requests[current_floor - 1])
                    next_state = DOOR_OPEN;
            end

            DOOR_OPEN: begin
                door_open = 1;
                next_state = IDLE;
            end
        endcase
    end

    // Floor movement
    always @(posedge clk or posedge rst) begin
        if (rst)
            current_floor <= 2'd0;
        else begin
            if (state == MOVING_UP && current_floor < 2)
                current_floor <= current_floor + 1;
            else if (state == MOVING_DOWN && current_floor > 0)
                current_floor <= current_floor - 1;
        end
    end

endmodule
